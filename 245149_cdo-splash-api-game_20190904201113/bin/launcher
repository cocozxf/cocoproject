#!/bin/bash

# 导入pass平台的配置信息
env_path=$(dirname $0)/../../env.sh
if [ -f $env_path ]; then
    source $env_path
fi


# 环境定义文件
SETTING_FILE="/web/settings/environment.conf"
# 运行环境,PROD/GRAMA/TEST/DEV
ENV=""
# 机房编号,BEIJING/HANGZHOU
IDC=""
# 应用名称
APP_NAME=""
# 可执行包名称
PACKAGE_NAME=""
# 安装目录
HOME_DIR=""
# 脚本文件目录
BIN_DIR=""
# 配置文件目录
CONF_DIR=""
# 日志文件目录
LOG_DIR=""
# 依赖包安装目录
LIB_DIR=""
# 可执行包文件
PACKAGE_FILE=""
# 服务配置文件
CONF_FILE=""
# 进程ID文件
PID_FILE=$BIN_DIR/pid
# 进程ID
PID=""
# Java安装目录
JAVA_HOME=$JAVA_HOME
# Jvm启动参数
JVM_OPTIONS=""
# 链路监控开关,OFF关,ON开
PINPOINT_SWITCH="OFF"
# 链路监控依赖包
PINPOINT_PACKAGE_FILE="$HOME_DIR/pinpoint/pinpoint-bootstrap-1.6.2.jar"
# 链路监控数据上报地址
PINPOINT_COLLECTOR_IP=""
# 守护进程注册路径
DAEMON_REGISTRY_DIR="/web/settings/daemon/registry"
# 守护进程注册文件
DAEMON_REGISTRY_FILE=$DAEMON_REGISTRY_DIR/$APP_NAME
# GC日志文件
GC_LOG_FILE=$LOG_DIR/gc.log
# 使用的linux kill信号
LINUX_KILL_SIGNAL=""

function get_property()
{
	if [ ! -f $1 ] || [ $# -ne 2 ]; then
		return 1
	fi
	property_file=$1
	key=$2

	cat $property_file | while read line
	do
		ignore=$(echo $line | awk 'BEGIN{ret="false"} /^#/{ret="true"} /^$/{ret="true"} END{print ret}')
		if [ $ignore == "true" ]; then
			continue
		fi

		field=$(echo $line | awk -F= '{gsub(" |\t","",$1); print $1}')
		value=$(echo $line | awk -F= '{gsub("","",$2); print $2}')
		if [ "X$key" = "X$field" ]; then
			echo $value
			break
		fi
	done
	return 0
}

function get_ini_property()
{
    ini_file=$1
    if [ ! -f $ini_file ] || [ $# -ne 3 ]; then
        return 1
    fi
    section=$2
    key=$3

    begin_section="false"
    end_section="false"
    cat $ini_file | while read line
    do
        if [ "X$line" == "X[$section]" ]; then
            begin_section="true"
            continue
        fi

        if [ $begin_section == "true" ]; then
            end_section=$(echo $line | awk 'BEGIN{ret=false} /^\[.*\]$/{ret=true} END{print ret}')
            if [ "X$end_section" == "Xtrue" ]; then
                break
            fi
            ignore=$(echo $line | awk 'BEGIN{ret="false"} /^#/{ret="true"} /^$/{ret="true"} END{print ret}')
            if [ $ignore == "true" ]; then
                continue
            fi
            field=$(echo $line | awk -F= '{gsub(" |\t","",$1); print $1}')
            start=`echo $field | wc -L`
            let start=start+2
            value=`echo $line | cut -b $start- | sed 's/^[ =\t]*//g'`
            if [ "X$key" == "X$field" ]; then
                echo $value
                break
            fi
        fi
    done
    return 0
}

function init()
{
	init_env_and_idc
	init_dir
	init_conf
	init_pid
	init_jvm_options
	check_init
}

function init_env_and_idc()
{
	ENV=$(get_property $SETTING_FILE "env")
	IDC=$(get_property $SETTING_FILE "idc")
}

function init_dir()
{
	HOME_DIR=$(cd `dirname $0`; pwd)
	HOME_DIR=${HOME_DIR%/bin}
	BIN_DIR=$HOME_DIR/bin
	LIB_DIR=$HOME_DIR/lib
	CONF_DIR=$HOME_DIR/conf
	LOG_DIR=$HOME_DIR/logs
	if [ ! -d "$LOG_DIR" ]; then
        `mkdir $LOG_DIR`
    fi
    CONF_FILE="$CONF_DIR/launcher.conf"
	PINPOINT_PACKAGE_FILE="$HOME_DIR/pinpoint/pinpoint-bootstrap-1.6.2.jar"
}

function init_conf()
{
	APP_NAME=$(get_ini_property $CONF_FILE COMMON app_name)
	LINUX_KILL_SIGNAL=$(get_ini_property $CONF_FILE COMMON linux_kill_signal)
	if [ "X$LINUX_KILL_SIGNAL" == "X" ]; then
	  LINUX_KILL_SIGNAL=15
  fi
	PACKAGE_NAME=$(get_ini_property $CONF_FILE COMMON package_name)
	PINPOINT_SWITCH=$(get_ini_property $CONF_FILE $ENV pinpoint_switch)
	if [ "X$PINPOINT_SWITCH" != "XON" ]; then
		PINPOINT_SWITCH="OFF"
	fi
	PACKAGE_FILE=$LIB_DIR/$PACKAGE_NAME
	DAEMON_REGISTRY_FILE=$DAEMON_REGISTRY_DIR/$APP_NAME
	GC_LOG_FILE=$LOG_DIR/gc.log
}

function check_pid()
{
    if [ "X$PID" != "X" ]; then
        if [ ! -d "/proc/$PID" ]; then
            PID=""
        fi
    fi
}

function init_pid()
{
	PID_FILE=$BIN_DIR/pid
	if [ -f  "$PID_FILE" ]; then
		PID=`cat $PID_FILE`
		check_pid
	fi
	if [ "X$PID" == "X" ]; then
		PID=$(ps aux | grep -v 'grep' | egrep "$LIB_DIR/$APP_NAME-*" | awk '{print $2}')
		check_pid
	fi
	if [ "X$PID" == "X" ]; then
		PID=$(ps aux | grep -v 'grep' | egrep "../lib/$APP_NAME-*" | awk '{print $2}')
		check_pid
	fi
	pid_num=`echo $PID | grep " " | wc -l`
	if [ ! "$pid_num" == "0" ]; then
		PID=""
	fi
}

function init_jvm_options()
{
	JVM_OPTIONS=$(get_ini_property $CONF_FILE COMMON jvm_common_options)
	JVM_OPTIONS="${JVM_OPTIONS} $(get_ini_property $CONF_FILE $ENV jvm_options)"
	JVM_OPTIONS="${JVM_OPTIONS} -Dspring.profiles.active=$(echo $ENV | tr '[A-Z]' '[a-z]') -Dcluster.env=$ENV -Dcluster.idc=$IDC -Dhome.dir=$HOME_DIR -Xloggc:$GC_LOG_FILE"
    init_jvm_pinpoint_options
}


function init_jvm_pinpoint_options()
{
    if [ $ENV == "DEV" ]; then
        PINPOINT_COLLECTOR_IP=""
    fi
    if [ $ENV == "FAT" ]; then
        PINPOINT_COLLECTOR_IP="172.30.249.186"
    fi
    if [ $ENV == "LPT" ]; then
        PINPOINT_COLLECTOR_IP=""
    fi
    if [ $ENV == "PRO" ]; then
        PINPOINT_COLLECTOR_IP="zing.cdo.oppo.local"
    fi

    if [ $PINPOINT_SWITCH == "ON" ]; then
    	JVM_OPTIONS="${JVM_OPTIONS} -javaagent:$PINPOINT_PACKAGE_FILE -Dpinpoint.applicationName=$APP_NAME -Dpinpoint.profiler.collector.ip=$PINPOINT_COLLECTOR_IP"
    	JVM_OPTIONS="${JVM_OPTIONS} $(get_ini_property $CONF_FILE $ENV jvm_pinpoint_options)"
    fi
}

function check_init()
{
	echo "ENV=$ENV"
	echo "IDC=$IDC"
	echo "JAVA_HOME=$JAVA_HOME"
	echo "LINUX_KILL_SIGNAL=$LINUX_KILL_SIGNAL"
	echo "APP_NAME=$APP_NAME"
	echo "PACKAGE_NAME=$PACKAGE_NAME"
	echo "HOME_DIR=$HOME_DIR"
	echo "BIN_DIR=$BIN_DIR"
	echo "LIB_DIR=$LIB_DIR"
	echo "LOG_DIR=$LOG_DIR"
	echo "PACKAGE_FILE=$PACKAGE_FILE"
	echo "PID_FILE=$PID_FILE"
    echo "PID=$PID"
	echo "JVM_OPTIONS=$JVM_OPTIONS"
	if [ "X$ENV" == "X" ] || [ "X$IDC" == "X" ] || [ "X$APP_NAME" == "X" ] || [ "X$PACKAGE_NAME" == "X" ] || [ "X$HOME_DIR" == "X" ] || [ "X$JAVA_HOME" == "X" ]; then
		echo "ERROR!!! init failed."
		exit 1
	fi
}

function register_daemon()
{
	if [ -f $DAEMON_REGISTRY_FILE ]; then
		`rm $DAEMON_REGISTRY_FILE`
	fi
	if [ ! -d $DAEMON_REGISTRY_DIR ]; then
		`mkdir -p $DAEMON_REGISTRY_DIR`
	fi
	echo "home=$HOME_DR" >> $DAEMON_REGISTRY_FILE
	echo "app_name=$APP_NAME" >> $DAEMON_REGISTRY_FILE
	start_time=`date +%s`
	echo "start_time=$start_time" >> $DAEMON_REGISTRY_FILE
	echo "pid=$PID" >> $DAEMON_REGISTRY_FILE
	liveness_probe_httpGet_path=$(get_ini_property $CONF_FILE $ENV liveness_probe_httpGet_path)
	liveness_probe_httpGet_port=$(get_ini_property $CONF_FILE $ENV liveness_probe_httpGet_port)
	liveness_probe_httpGet_initialDelaySeconds=$(get_ini_property $CONF_FILE $ENV liveness_probe_httpGet_initialDelaySeconds)
	liveness_probe_httpGet_timeoutSeconds=$(get_ini_property $CONF_FILE $ENV liveness_probe_httpGet_timeoutSeconds)
	reboot_when_liveness_error_count=$(get_ini_property $CONF_FILE $ENV reboot_when_liveness_error_count)
	if [ "X$liveness_probe_httpGet_initialDelaySeconds" == "X" ]; then
		liveness_probe_httpGet_initialDelaySeconds=60
	fi
	if [ "X$liveness_probe_httpGet_timeoutSeconds" == "X" ]; then
		liveness_probe_httpGet_timeoutSeconds=5
	fi
	if [ "X$reboot_when_liveness_error_count" == "X" ]; then
		reboot_when_liveness_error_count=6
	fi
	if [ "X$liveness_probe_httpGet_path" != "X" ] && [ "X$liveness_probe_httpGet_port" != "X" ]; then
		echo "liveness_probe_httpGet_path=$liveness_probe_httpGet_path" >> $DAEMON_REGISTRY_FILE
		echo "liveness_probe_httpGet_port=$liveness_probe_httpGet_port" >> $DAEMON_REGISTRY_FILE
		echo "liveness_probe_httpGet_initialDelaySeconds=$liveness_probe_httpGet_initialDelaySeconds" >> $DAEMON_REGISTRY_FILE
		echo "liveness_probe_httpGet_timeoutSeconds=$liveness_probe_httpGet_timeoutSeconds" >> $DAEMON_REGISTRY_FILE
	fi
	liveness_probe_telnet_port=$(get_ini_property $CONF_FILE $ENV liveness_probe_telnet_port)
	if [ "X$liveness_probe_telnet_port" != "X" ]; then
		echo "liveness_probe_telnet_port=$liveness_probe_telnet_port" >> $DAEMON_REGISTRY_FILE
	fi
	echo "reboot_when_liveness_error_count=$reboot_when_liveness_error_count" >> $DAEMON_REGISTRY_FILE

	echo "register $APP_NAME daemon success."
}

function unregister_daemon()
{
	if [ -f $DAEMON_REGISTRY_FILE ]; then
		`rm $DAEMON_REGISTRY_FILE`
		echo "unregister $APP_NAME daemon success."
	fi
}

function rm_pid_file()
{
	if [ -f "$PID_FILE" ]; then
		`rm $PID_FILE`
	fi
}

function check_service_status()
{
	_pid=$(ps aux | grep -v 'grep' | egrep "$LIB_DIR/$APP_NAME-*" | awk '{print $2}')
	if [ "X$_pid" == "X" ]; then
		_pid=$(ps aux | grep -v 'grep' | egrep "../lib/$APP_NAME-*" | awk '{print $2}')
	fi
	if [ "X$_pid" == "X" ]; then
		echo "stop"
	else
		echo "running"
	fi
}

function stop_service()
{
	if [ "X$PID" == "X" ]; then
		echo "$APP_NAME is not launched!"
		return 0;
	else
		echo "script will stop service: $APP_NAME, pid is $PID"
	fi
	# 重试次数
	retry=8
	elapsed_time=0
	while [ $retry -gt 0 ]; do
		if [ $(check_service_status) == "stop" ]; then
			echo "shutdown success, elapsed $elapsed_time second."
			# 删除PID文件
			rm_pid_file
			break
		fi
		kill -$LINUX_KILL_SIGNAL $PID
		sleep 1
		let retry=retry-1
		let elapsed_time=elapsed_time+1
	done
	if [ $(check_service_status) == "running" ]; then
       echo "shutdown error, $APP_NAME is still running."
   fi
}

function force_stop_service()
{
	# 强制停止服务
	if [ $(check_service_status) == "running" ]; then
		kill -9 $PID
		sleep 1
	fi

	if [ $(check_service_status) == "stop" ]; then
		echo "force shutdown success."
		# 删除PID文件
		rm_pid_file
	else
		echo "ERROR!!! stop service failed, pid $PID"
	fi
}

function start_service()
{
	echo "launch $APP_NAME service..."
	java_bin=`which java`
	if [ -f "$JAVA_HOME/bin/java" ]; then
		java_bin="$JAVA_HOME/bin/java"
	fi
	stdout_log_file=$LOG_DIR/$APP_NAME-console.log
	nohup $java_bin $JVM_OPTIONS -jar $PACKAGE_FILE > $stdout_log_file 2>&1 &
	PID=`echo $!`
	if [ -d "/proc/$PID" ]; then
		echo $PID > $PID_FILE
		echo "launcher service success, pid $PID"
	else
		echo "start $PACKAGE_FILE failed, please check $stdout_log_file."
	fi
}

function start()
{
 if [ $(check_service_status) == "running" ]; then
    echo "start error, $APP_NAME is running."
    exit 1
 fi
	start_service
#	register_daemon
	exit 0
}

function stop()
{
#	unregister_daemon
	stop_service
	exit 0
}

function force_stop()
{
#	unregister_daemon
	force_stop_service
	exit 0
}

function restart()
{
#	unregister_daemon
	stop_service
	sleep 1
	if [ $(check_service_status) == "running" ]; then
		force_stop_service
	fi
	start_service
#	register_daemon
}

function status()
{
	if [ $PID != "" ]; then
		if [ ! -d "/proc/$PID" ]; then
			echo "$APP_NAME is not running, pid $PID"
			exit 0
		else
			echo "service start time:"
			ps -p $PID -o lstart
			echo "service is running, status info >"
			cat "/proc/$PID/status"
		fi
	else
		echo "$APP_NAME is not running."
	fi
	exit 0
}

function usage()
{
cat<<EOF
java service launcher help
usage: launcher [options]
       	-start          start service
       	-stop           stop service
       	-force-stop		force stop service
       	-status         check service run status
       	-restart        restart service
       	-help           Print service launcher help
EOF
exit 0
}
# 脚本入口
init
for arg ; do
	case "$arg" in
		-help ) usage
			;;
		-start ) start
			;;
		-stop ) stop
			;;
		-force-stop ) force_stop
			;;
		-restart ) restart
			;;
		* ) usage
			;;
	esac
done
